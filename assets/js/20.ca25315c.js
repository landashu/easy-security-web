(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{507:function(t,e,s){"use strict";s.r(e);var l=s(41),a=Object(l.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("单体架构使用 easy-security 是很简单的事情，但是在微服务环境下如何使用 easy-security 呢？只需要按照以下步骤实现即可：")]),t._v(" "),s("ul",[s("li",[t._v("每个服务都依赖 easy-security，且不需要配置任何东西")]),t._v(" "),s("li",[t._v("所有的接口均为 POST 请求"),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("我们推荐使用 POST 方式完成项目的所有接口，只是为了更简单的编写代码、快速的开发以及简便的规范")])])]),t._v(" "),s("li",[t._v("所有接口使用 Req 封装类，特殊的接口可以不使用")])]),t._v(" "),s("p",[t._v("gateway 或 bff 接收到请求后会经过过滤器完成鉴权，并把用户设置到 Req 封装类中，当使用 RPC 请求下游服务的时候，每个下游必须使用 Req 封装类接收，当接口参数及类型完全吻合，那么就可以使用 Req 的所有方法，并获取到用户，前端数据，以及 Token。")])])}),[],!1,null,null,null);e.default=a.exports}}]);