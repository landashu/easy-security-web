(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{504:function(e,t,s){"use strict";s.r(t);var a=s(41),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("easy-security 基于过滤器实现的一款配合 spring 快速开发的安全认证框架，思想是希望通过简单的配置，并且实现核心的方法达到认证和鉴权的目的。")]),e._v(" "),s("p",[e._v("easy-security 不限制存取 token 方式，无论是保存到服务端还是使用 JWT 等都可以，因为这部分是由开发者自己来定义的，只需要告诉 easy-security 该如何获取用户信息即可。")]),e._v(" "),s("p",[e._v("如果你使用了 easy-security 自身所带的 Req 请求封装，那么所有的接口请求均以 POST 方式，Req 会把认证后的用户所携带在每次请求中，当需要获取用户的时候可以通过 Req 直接获取，解耦开发者获取认证用户的")]),e._v(" "),s("p",[e._v("easy-security 结合了 Yapi 的使用，如果你使用 Yapi 需要在自己的项目中描述规则")]),e._v(" "),s("h2",{attrs:{id:"功能介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#功能介绍"}},[e._v("#")]),e._v(" 功能介绍")]),e._v(" "),s("ul",[s("li",[e._v("认证拦截")]),e._v(" "),s("li",[e._v("权限校验")]),e._v(" "),s("li",[e._v("用户获取")]),e._v(" "),s("li",[e._v("黑名单")]),e._v(" "),s("li",[e._v("密文传输 (内置 AES 加密算法)")])])])}),[],!1,null,null,null);t.default=i.exports}}]);